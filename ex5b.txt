KDimensionalTree.java

public class KDimensionalTree
  {
    static final int k = 2;
    KDNode root;
    KDimensionalTree()
    {
      root = null;
    }
  public class KDNode {
      int point[] = new int[k]; // To store k dimensional point
      KDNode left, right;
      KDNode(int point1[]){
        for (int i1 = 0; i1 < k; i1++) {
          point[i1] = point1[i1];
        }
        left = null;
        right = null;
      }
  }
    public KDNode insertRec(KDNode root, int point1[], int depth)
    {
      int cd = depth % k;
      if (root == null) {
        root = new KDNode(point1);
      } else if (point1[cd] < root.point[cd])
          root.left = insertRec(root.left, point1, (cd+1) % k);
      else if (point1[cd] > root.point[cd])
           root.right = insertRec(root.right, point1, (cd+1) % k);
      else {
        throw new IllegalArgumentException("K-Dimensional Tree already contains a node");
      }
     return root;
    }
    public KDNode insert(KDNode root, int point1[]) {
      return insertRec(root, point1, 0);
      }
Boolean arePointsSame(int point1[], int point2[])
{
    // Compare individual pointinate values
    for (int i = 0; i < k; ++i)
        if (point1[i] != point2[i])
            return false;

    return true;
}
    // Copies point point2 to point1
void copyPoint(int point1[], int point2[])
{
   for (int i=0; i<k; i++)
       point1[i] = point2[i];
}
    // Searches a Point represented by "point[]" in the K D tree.
    // The parameter depth is used to determine current axis.
    Boolean searchRec(KDNode root, int point[], int depth)
    {
    // Base cases
    if (root == null)
        return false;
    if (arePointsSame(root.point, point))
        return true;

    // Current dimension is computed using current depth and total
    // dimensions (k)
    int cd = depth % k;

    // Compare point with root with respect to cd (Current dimension)
    if (point[cd] < root.point[cd])
        return searchRec(root.left, point, (cd+1) % k);

    return searchRec(root.right, point, (cd+1) % k);
}

// Searches a Point in the K D tree. It mainly uses
// searchRec()
Boolean search(KDNode root, int point[])
{
    // Pass current depth as 0
    return searchRec(root, point, 0);
}
    void printall(KDNode root, int depth){
       if (root == null) {
         return;
       }
      int cd = depth % k;
      printall(root.left, (cd+1) % k);
      for (int i = 0; i < k; ++i)
        System.out.println("point["+i+"] : "+root.point[i]);
      System.out.println("Current Dimension : "+cd);
      printall(root.right, (cd+1) % k);
    }
    // A utility function to find minimum of three integers
KDNode minNode(KDNode x,  KDNode y, KDNode z, int d)
{
    KDNode res = x;
    if (y != null && y.point[d] < res.point[d])
       res = y;
    if (z != null && z.point[d] < res.point[d])
       res = z;
    return res;
}
 // Recursively finds minimum of d'th dimension in KD tree
// The parameter depth is used to determine current axis.
KDNode findMinRec(KDNode root, int d, int depth)
{
    // Base cases
    if (root == null)
        return null;

    // Current dimension is computed using current depth and total
    // dimensions (k)
    int cd = depth % k;

    // Compare point with root with respect to cd (Current dimension)
    if (cd == d)
    {
        if (root.left == null)
            return root;
        return findMinRec(root.left, d, depth+1);
    }

    // If current dimension is different then minimum can be anywhere
    // in this subtree
    return minNode(root,
               findMinRec(root.left, d, depth+1),
               findMinRec(root.right, d, depth+1), d);
}

// A wrapper over findMinRec(). Returns minimum of d'th dimension
KDNode findMin(KDNode root, int d)
{
    // Pass current level or depth as 0
    return findMinRec(root, d, 0);
}

// Function to delete a given point 'point[]' from tree with root
// as 'root'.  depth is current depth and passed as 0 initially.
// Returns root of the modified tree.
KDNode deleteNodeRec(KDNode root, int point[], int depth)
{
    // Given point is not present
    if (root == null)
        return null;

    // Find dimension of current node
    int cd = depth % k;

    // If the point to be deleted is present at root
    if (arePointsSame(root.point, point))
    {
        // 2.b) If right child is not NULL
        if (root.right != null)
        {
            // Find minimum of root's dimension in right subtree
            KDNode min = findMin(root.right, cd);

            // Copy the minimum to root
            copyPoint(root.point, min.point);

            // Recursively delete the minimum
            root.right = deleteNodeRec(root.right, min.point, depth+1);
        }
        else if (root.left != null) // same as above
        {
            KDNode min = findMin(root.left, cd);
            copyPoint(root.point, min.point);
            root.left = deleteNodeRec(root.left, min.point, depth+1);
        }
        else // If node to be deleted is leaf node
        {
            root = null;
            return null;
        }
        return root;
    }

    // 2) If current node doesn't contain point, search downward
    if (point[cd] < root.point[cd])
        root.left = deleteNodeRec(root.left, point, depth+1);
    else
        root.right = deleteNodeRec(root.right, point, depth+1);
    return root;
}

// Function to delete a given point from K D Tree with 'root'
 public KDNode deleteNode(KDNode root, int point[])
{
   // Pass depth as 0
   return deleteNodeRec(root, point, 0);
}
    }


Main.java

import java.util.*;
class Main {
  public static void main(String[] args) {
    int value = 0, option =0;
    Scanner myObj = new Scanner(System.in);
    int k1 = 2;
    KDimensionalTree kdtree = new KDimensionalTree();
    int[] points = new int[k1];


      while(true) {
      System.out.println("1.Insert\n2.Search\n3.Print the 2-dimensional tree\n4.Delete");
       System.out.println("Enter the option");
      option = Integer.parseInt(myObj.nextLine());
      switch (option) {
        case 1:
          System.out.println("*******INSERT*******");
          System.out.println("Enter the values to add");
              for(int yy=0; yy< k1; yy++)
                points[yy] = Integer.parseInt(myObj.nextLine());
          try {
          kdtree.root = kdtree.insert(kdtree.root, points);
            } catch (Exception e) {
          e.printStackTrace();
        }
          break;
          case 2:
          System.out.println("*******SEARCH*******");
          System.out.println("Enter the values to search");
          for(int yy=0; yy< k1; yy++)
            points[yy] = Integer.parseInt(myObj.nextLine());
          if(kdtree.search(kdtree.root, points) == true) {
              System.out.println("The element is present");
          } else {
              System.out.println("The element is not present");
          }
          break;
        case 3:
          System.out.println("*******2-D Tree*******");
          kdtree.printall(kdtree.root, 0);
          break;
        case 4:
          System.out.println("*******Delete in 2-D Tree*******");
          System.out.println("Enter the values to delete");
          for(int yy=0; yy< k1; yy++)
            points[yy] = Integer.parseInt(myObj.nextLine());
          kdtree.deleteNode(kdtree.root, points);
          break;
        default:
          System.out.println("Wrong Option");
          break;
      }
  }

  /*  int point1[] = {10, 19};
    (search(root, point1))? cout << "Found\n": cout << "Not Found\n";

    int point2[] = {12, 19};
    (search(root, point2))? cout << "Found\n": cout << "Not Found\n";
  */
  }
}


OUTPUT:

 sh -c javac -classpath .:target/dependency/ -d . $(find . -type f -name '*.java')
îº§ java -classpath .:target/dependency/* Main
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
1
*******INSERT*******
Enter the values to add
53
14
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
1
*******INSERT*******
Enter the values to add
27
28
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
1
*******INSERT*******
Enter the values to add
30
11
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
1
*******INSERT*******
Enter the values to add
67
51
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
1
*******INSERT*******
Enter the values to add
70
3
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
2
*******SEARCH*******
Enter the values to search
67
51
The element is present
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
2
*******SEARCH*******
Enter the values to search
65
66
The element is not present
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
3
*******2-D Tree*******
point[0] : 30
point[1] : 11
Current Dimension : 0
point[0] : 27
point[1] : 28
Current Dimension : 1
point[0] : 53
point[1] : 14
Current Dimension : 0
point[0] : 70
point[1] : 3
Current Dimension : 0
point[0] : 67
point[1] : 51
Current Dimension : 1
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
4
*******Delete in 2-D Tree*******
Enter the values to delete
70
3
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option
3
*******2-D Tree*******
point[0] : 30
point[1] : 11
Current Dimension : 0
point[0] : 27
point[1] : 28
Current Dimension : 1
point[0] : 53
point[1] : 14
Current Dimension : 0
point[0] : 67
point[1] : 51
Current Dimension : 1
1.Insert
2.Search
3.Print the 2-dimensional tree
4.Delete
Enter the option