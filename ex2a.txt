###########################################
Main.java
import java.util.*;
import java.io.*;

class Main {
    public static void main(String[] args)
    {
      int count = 0, size = 0, option = 0;
      String value_name;
      boolean value;
      CoarseList<String> list=new CoarseList<String>();
      Scanner myObj = new Scanner(System.in);

      System.out.println("CONCURRENT LINKED LIST USING COARSE GRAINED SYNCHRONIZATION\n");

      while(true) {
              System.out.println("1.Add\n2.Contains\n3.Remove\n");
       System.out.println("Enter the option");
      option = Integer.parseInt(myObj.nextLine());
switch (option) {
  case 1:
      System.out.println("Enter the values to add");
      value_name = myObj.nextLine();
      list.add(value_name);
      break;
  case 2:
      System.out.println("Check whether the value is present or not?");
      System.out.println("Enter the values to search");
      value_name = myObj.nextLine();
      value = list.contains(value_name);
      value_name = value ? "The value is present" : "The value is not present";
      System.out.println(value_name);
      break;
      case 3:
        System.out.println("Remove an item from the list");
        System.out.println("Enter the values to remove");
        value_name = myObj.nextLine();
        list.remove(value_name);
      break;
      default:
      System.out.println("Invalid option");
      break;
        }    }
    }
}

CoarseList.java

import java.util.*;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class CoarseList<T> {
  private Node head;
  private Lock lock = new ReentrantLock();
  public CoarseList() {
    head  = new Node(Integer.MIN_VALUE);
    head.next  = new Node(Integer.MAX_VALUE);
  }

  /**
   * Add an element.
   * @param item element to add
   * @return true iff element was not there already
   */
  public boolean add(T item) {

    Node pred, current;
    int key = item.hashCode();
    lock.lock();
    try {
      pred = head;
      current = pred.next;
      while (current.key < key) {
        pred = current;
        current = current.next;
      }
      if (key == current.key) {
        return false;
      } else {
        Node node = new Node(item);
        node.next = current;
        pred.next = node;
        return true;
      }
    } finally {
      lock.unlock();
    }
  }

  /**
   * Remove an element.
   * @param item element to remove
   * @return true iff element was present
   */
  public boolean remove(T item) {

    Node pred, current;
    int key = item.hashCode();

    lock.lock();
    try {
      pred = this.head;
      current = pred.next;
      while (current.key < key) {
        pred = current;
        current = current.next;
      }
      if (key == current.key) {
        pred.next = current.next;
        return true;
      } else {
        return false;
      }
    } finally {
      lock.unlock();
    }
  }

  /**
   * Test whether element is present
   * @param item element to test
   * @return true iff element is present
   */
  public boolean contains(T item) {
    Node pred, current;
    int key = item.hashCode();
    lock.lock();
    try {
      pred = head;
      current = pred.next;
      while (current.key < key) {
        pred = current;
        current = current.next;
      }
      return (key == current.key);
    } finally {
      lock.unlock();
    }
  }

  private class Node {
    T item;
    int key;
    Node next;
    Node(T item) {
      this.item = item;
      this.key = item.hashCode();
    }
    Node(int key) {
      this.item = null;
      this.key = key;
    }
  }
}
##############################################################
OUTPUT:

 javac -classpath .:/run_dir/junit-4.12.jar:target/dependency/* -d . CoarseList.java Main.java
 java -classpath .:/run_dir/junit-4.12.jar:target/dependency/* Main
CONCURRENT LINKED LIST USING COARSE GRAINED SYNCHRONIZATION

1.Add
2.Contains
3.Remove

Enter the option
1
Enter the values to add
23
1.Add
2.Contains
3.Remove

Enter the option
1
Enter the values to add
34
1.Add
2.Contains
3.Remove

Enter the option
1
Enter the values to add
45
1.Add
2.Contains
3.Remove

Enter the option
1
Enter the values to add
55
1.Add
2.Contains
3.Remove

Enter the option
1
Enter the values to add
67
1.Add
2.Contains
3.Remove

Enter the option
1
Enter the values to add
77
1.Add
2.Contains
3.Remove

Enter the option
2
Check whether the value is present or not?
Enter the values to search
55
The value is present
1.Add
2.Contains
3.Remove

Enter the option
2
Check whether the value is present or not?
Enter the values to search
56
The value is not present
1.Add
2.Contains
3.Remove

Enter the option
3
Remove an item from the list
Enter the values to remove
56
1.Add
2.Contains
3.Remove

Enter the option
2
Check whether the value is present or not?
Enter the values to search
56
The value is not present
1.Add
2.Contains
3.Remove

Enter the option
2
Check whether the value is present or not?
Enter the values to search
55
The value is present
1.Add
2.Contains
3.Remove

Enter the option
3
Remove an item from the list
Enter the values to remove
55
1.Add
2.Contains
3.Remove

Enter the option
2
Check whether the value is present or not?
Enter the values to search
55
The value is not present
1.Add
2.Contains
3.Remove

Enter the option