SkipList.java
import java.util.*;

// Class to implement node
class Node
{
    int key;
    // Array to hold pointers to node of different level
    Node[] forward;

Node(int key, int level)
{
    this.key = key;
    // Allocate memory to forward
    forward = new Node[level+1];
    for (int i = 0; i < level+1; i++) {
      forward[i] = null;
    }
}
}
// Class for Skip list
class SkipList
{
    // Maximum level for this skip list
    int MAXLVL;

    // P is the fraction of the nodes with level
    // i pointers also having level i+1 pointers

    // current level of skip list
    int level;

    // pointer to header node
    Node header;

SkipList(int MAXLVL)
{
    this.MAXLVL = MAXLVL;
    level = 0;

    // create header node and initialize key to -1
    header = new Node(-1, MAXLVL);
}

// create random level for node
int randomLevel()
{
    Random rand = new Random();
   return rand.nextInt(MAXLVL);
}

// create new node
Node createNode(int key, int level)
{
    Node n = new Node(key, level);
    return n;
}

// Insert given key in skip list
private void insertElement(int key)
{
    Node current = header;

    // create update array and initialize it
    Node [] update;
    update = new Node[MAXLVL+1];
      for (int i = 0; i < MAXLVL+1; i++) {
      update[i] = null;
    }
    for (int i = level; i >= 0; i--)
    {
        while (current.forward[i] != null &&
              current.forward[i].key < key)
            current = current.forward[i];
        update[i] = current;
    }

    /* reached level 0 and forward pointer to
       right, which is desired position to
       insert key.
    */
    current = current.forward[0];

    /* if current is NULL that means we have reached
       to end of the level or current's key is not equal
       to key to insert that means we have to insert
       node between update[0] and current node */
    if (current == null || current.key != key)
    {
        // Generate a random level for node
        int rlevel = randomLevel();

        // If random level is greater than list's current
        // level (node with highest level inserted in
        // list so far), initialize update value with pointer
        // to header for further use
        if (rlevel > level)
        {
            for (int i=level+1;i<rlevel+1;i++)
                update[i] = header;

            // Update the list current level
            level = rlevel;
        }

        // create new node with random level generated
        Node n = createNode(key, rlevel);

        // insert node by rearranging pointers
        for (int i=0;i<=rlevel;i++)
        {
            n.forward[i] = update[i].forward[i];
            update[i].forward[i] = n;
        }
        System.out.println("Successfully Inserted key "+ key);
    }
}

// Display skip list level wise
void displayList()
{
    System.out.println("*****Skip List*****");
    for (int i=0;i<=level;i++)
    {
        Node node = header.forward[i];
        System.out.print("Level "+i+": ");
        while (node != null)
        {
            System.out.print(node.key+" ");
            node = node.forward[i];
        }
        System.out.print("\n");
    }
}

  // Search for element in skip list
void searchElement(int key)
{
    Node current = header;

    /*    start from highest level of skip list
        move the current pointer forward while key
        is greater than key of node next to current
        Otherwise inserted current in update and
        move one level down and continue search
    */
    for(int i = level; i >= 0; i--)
    {
        while(current.forward[i] != null && current.forward[i].key < key)
            current = current.forward[i];

    }

    /* reached level 0 and advance pointer to
       right, which is possibly our desired node*/
    current = current.forward[0];

    // If current node have key equal to
    // search key, we have found our target node
    if(current != null && current.key == key) {
        System.out.println("Found key: "+key+"\n");
      } else {
        System.out.println("Key is not found \n");
      }
}
// Delete element from skip list
void deleteElement(int key)
{
    Node current = header;

    // create update array and initialize it
    Node[] update;
    update = new Node[MAXLVL+1];
      for (int i = 0; i < MAXLVL+1; i++) {
      update[i] = null;
    }

    /*    start from highest level of skip list
        move the current pointer forward while key
        is greater than key of node next to current
        Otherwise inserted current in update and
        move one level down and continue search
    */
    for(int i = level; i >= 0; i--)
    {
        while(current.forward[i] != null  &&
              current.forward[i].key < key)
            current = current.forward[i];
        update[i] = current;
    }

    /* reached level 0 and forward pointer to
       right, which is possibly our desired node.*/
    current = current.forward[0];

    // If current node is target node
    if(current != null && current.key == key)
    {
        /* start from lowest level and rearrange
           pointers just like we do in singly linked list
           to remove target node */
        for(int i=0;i<=level;i++)
        {
            /* If at level i, next node is not target
               node, break the loop, no need to move
              further level */
            if(update[i].forward[i] != current)
                break;

            update[i].forward[i] = current.forward[i];
        }

        // Remove levels having no elements
        while(level>0 && header.forward[level] == null) {
            level--;
          }
         System.out.println("Successfully deleted key "+key+"\n");
    }
}

// Driver to test above code
  public static void main(String[] args) {
    int value = 0, option =0;
    Scanner myObj = new Scanner(System.in);
    SkipList skiplist=new SkipList(3);
    while(true) {
      System.out.println("1.Insert\n2.Delete\n3.Print the skiplist\n4.Search\n");
       System.out.println("Enter the option");
      option = Integer.parseInt(myObj.nextLine());
      switch (option) {
        case 1:
          System.out.println("*******INSERT*******");
          System.out.println("Enter the values to add");
          value = Integer.parseInt(myObj.nextLine());
          try {
          skiplist.insertElement(value);
            } catch (Exception e) {
          e.printStackTrace();
        }
          break;
        case 2:
          System.out.println("*******DELETE*******");
          System.out.println("Enter the values to delete");
          value = Integer.parseInt(myObj.nextLine());
          skiplist.deleteElement(value);
          break;
        case 3:
          System.out.println("*******SKIPLIST*******");
          skiplist.displayList();
          break;
        case 4:
          System.out.println("*******Search*******");
          System.out.println("Enter the values to search");
          value = Integer.parseInt(myObj.nextLine());
          skiplist.searchElement(value);
          break;
        default:
          System.out.println("Wrong Option");
          break;
      }
  }
  }
}


#################################
~/Skiplist$ javac SkipList.java
~/Skiplist$ java SkipList
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
1
*******INSERT*******
Enter the values to add
20
Successfully Inserted key 20
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
1
*******INSERT*******
Enter the values to add
45
Successfully Inserted key 45
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
1
*******INSERT*******
Enter the values to add
12
Successfully Inserted key 12
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
1
*******INSERT*******
Enter the values to add
78
Successfully Inserted key 78
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
1
*******INSERT*******
Enter the values to add
46
Successfully Inserted key 46
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
1
*******INSERT*******
Enter the values to add
90
Successfully Inserted key 90
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
3
*******SKIPLIST*******
*****Skip List*****
Level 0: 12 20 45 46 78 90
Level 1: 12 20 45 78
Level 2: 78
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
4
*******Search*******
Enter the values to search
78
Found key: 78

1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
4
*******Search*******
Enter the values to search
67
Key is not found

1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
2
*******DELETE*******
Enter the values to delete
45
Successfully deleted key 45

1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option
3
*******SKIPLIST*******
*****Skip List*****
Level 0: 12 20 46 78 90
Level 1: 12 20 78
Level 2: 78
1.Insert
2.Delete
3.Print the skiplist
4.Search

Enter the option