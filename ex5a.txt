
RedBlackTree.java

public class RedBlackTree {

  static final boolean RED = false;
  static final boolean BLACK = true;
  Node root;
  RedBlackTree() {
    root = null;
  }
  private void rotateRight(Node node) {
  Node parent = node.parent;
  Node leftChild = node.left;

  node.left = leftChild.right;
  if (leftChild.right != null) {
    leftChild.right.parent = node;
  }

  leftChild.right = node;
  node.parent = leftChild;

  replaceParentsChild(parent, node, leftChild);
}
 private void replaceParentsChild(Node parent, Node oldChild, Node newChild) {
  if (parent == null) {
    root = newChild;
  } else if (parent.left == oldChild) {
    parent.left = newChild;
  } else if (parent.right == oldChild) {
    parent.right = newChild;
  } else {
    throw new IllegalStateException("Node is not a child of its parent");
  }

  if (newChild != null) {
    newChild.parent = parent;
  }
}
 private void rotateLeft(Node node) {
  Node parent = node.parent;
  Node rightChild = node.right;

  node.right = rightChild.left;
  if (rightChild.left != null) {
    rightChild.left.parent = node;
  }

  rightChild.left = node;
  node.parent = rightChild;

  replaceParentsChild(parent, node, rightChild);
}
  public Node searchNode(int key) {
  Node node = root;
  while (node != null) {
    if (key == node.data) {
      return node;
    } else if (key < node.data) {
      node = node.left;
    } else {
      node = node.right;
    }
  }
  return null;
}

  public void inorderDisplay(Node node){
        if(node == null)
            return;
        inorderDisplay(node.left);

        System.out.printf(node.data + " - " );
    System.out.println((node.color)?"Black color \n ":"Red color \n");
        inorderDisplay(node.right);
    }

  public void insertNode(int key) {
  Node node = root;
  Node parent = null;

  // Traverse the tree to the left or right depending on the key
  while (node != null) {
    parent = node;
    if (key < node.data) {
      node = node.left;
    } else if (key > node.data) {
      node = node.right;
    } else {
      throw new IllegalArgumentException("BST already contains a node with key " + key);
    }
  }
  // Insert new node
  Node newNode = new Node(key);
  newNode.color = RED;
  if (parent == null) {
    root = newNode;
  } else if (key < parent.data) {
    parent.left = newNode;
  } else {
    parent.right = newNode;
  }
  newNode.parent = parent;

  fixRedBlackPropertiesAfterInsert(newNode);
}
  private void fixRedBlackPropertiesAfterInsert(Node node) {
  Node parent = node.parent;

  // Case 1: Parent is null, we've reached the root, the end of the recursion
  if (parent == null) {
    // Color the root as black.
    node.color = BLACK;
    return;
  }

  // Parent is black --> nothing to do
  if (parent.color == BLACK) {
    return;
  }

  // From here on, parent is red
  Node grandparent = parent.parent;

  // Case 2:
  // Not having a grandparent means that parent is the root. If we enforce black roots
  // (rule 2), grandparent will never be null, and the following if-then block can be
  // removed.
  if (grandparent == null) {
    // As this method is only called on red nodes (either on newly inserted ones - or -
    // recursively on red grandparents), all we have to do is to recolor the root black.
    parent.color = BLACK;
    return;
  }

  // Get the uncle (may be null/nil, in which case its color is BLACK)
  Node uncle = getUncle(parent);

  // Case 3: Uncle is red -> recolor parent, grandparent and uncle
  if (uncle != null && uncle.color == RED) {
    parent.color = BLACK;
    grandparent.color = RED;
    uncle.color = BLACK;

    // Call recursively for grandparent, which is now red.
    // It might be root or have a red parent, in which case we need to fix more...
    fixRedBlackPropertiesAfterInsert(grandparent);
  }

  // Parent is left child of grandparent
  else if (parent == grandparent.left) {
    // Case 4a: Uncle is black and node is left->right "inner child" of its grandparent
    if (node == parent.right) {
      rotateLeft(parent);

      // Let "parent" point to the new root node of the rotated sub-tree.
      // It will be recolored in the next step, which we're going to fall-through to.
      parent = node;
    }

    // Case 5a: Uncle is black and node is left->left "outer child" of its grandparent
    rotateRight(grandparent);

    // Recolor original parent and grandparent
    parent.color = BLACK;
    grandparent.color = RED;
  }

  // Parent is right child of grandparent
  else {
    // Case 4b: Uncle is black and node is right->left "inner child" of its grandparent
    if (node == parent.left) {
      rotateRight(parent);

      // Let "parent" point to the new root node of the rotated sub-tree.
      // It will be recolored in the next step, which we're going to fall-through to.
      parent = node;
    }

    // Case 5b: Uncle is black and node is right->right "outer child" of its grandparent
    rotateLeft(grandparent);

    // Recolor original parent and grandparent
    parent.color = BLACK;
    grandparent.color = RED;
  }
}
  private Node getUncle(Node parent) {
  Node grandparent = parent.parent;
  if (grandparent.left == parent) {
    return grandparent.right;
  } else if (grandparent.right == parent) {
    return grandparent.left;
  } else {
    throw new IllegalStateException("Parent is not a child of its grandparent");
  }
}
  public class Node {
  int data;

  Node left;
  Node right;
  Node parent;

  boolean color;

  public Node(int data) {
    this.data = data;
  }
}
}


Main.java

import java.util.*;

class Main {
  public static void main(String[] args) {
    int value = 0, option =0;
    Scanner myObj = new Scanner(System.in);
    RedBlackTree redblacktree=new RedBlackTree();
    while(true) {
      System.out.println("1.Insert\n2.Search\n3.Print the red black tree ");
       System.out.println("Enter the option");
      option = Integer.parseInt(myObj.nextLine());
      switch (option) {
        case 1:
          System.out.println("*******INSERT*******");
          System.out.println("Enter the values to add");
          value = Integer.parseInt(myObj.nextLine());
          try {
          redblacktree.insertNode(value);
            } catch (Exception e) {
          e.printStackTrace();
        }
          break;
        case 2:
          System.out.println("*******SEARCH*******");
          System.out.println("Enter the values to search");
          value = Integer.parseInt(myObj.nextLine());
          if(redblacktree.searchNode(value) != null) {
              System.out.println("The element is present");
          } else {
              System.out.println("The element is not present");
          }
          break;
        case 3:
          System.out.println("*******RED BLACK TREE*******");
          redblacktree.inorderDisplay(redblacktree.root);
          break;
        case 4:

        default:
          System.out.println("Wrong Option");
          break;
      }
  }
  }
}

OUTPUT:

 sh -c javac -classpath .:target/dependency/ -d . $(find . -type f -name '*.java')
 java -classpath .:target/dependency/* Main
1.Insert
2.Search
3.Print the red black tree
Enter the option
1
*******INSERT*******
Enter the values to add
10
1.Insert
2.Search
3.Print the red black tree
Enter the option
1
*******INSERT*******
Enter the values to add
85
1.Insert
2.Search
3.Print the red black tree
Enter the option
1
*******INSERT*******
Enter the values to add
15
1.Insert
2.Search
3.Print the red black tree
Enter the option
1
*******INSERT*******
Enter the values to add
70
1.Insert
2.Search
3.Print the red black tree
Enter the option
1
*******INSERT*******
Enter the values to add
20
1.Insert
2.Search
3.Print the red black tree
Enter the option
1
*******INSERT*******
Enter the values to add
60
1.Insert
2.Search
3.Print the red black tree
Enter the option
3
*******RED BLACK TREE*******
10 - Black color

15 - Black color

20 - Black color

60 - Red color

70 - Red color

85 - Black color

1.Insert
2.Search
3.Print the red black tree
Enter the option
2
*******SEARCH*******
Enter the values to search
10
The element is present
1.Insert
2.Search
3.Print the red black tree
Enter the option
2
*******SEARCH*******
Enter the values to search
61
The element is not present
1.Insert
2.Search
3.Print the red black tree
Enter the option