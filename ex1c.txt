################
QUEUE USING ARRAY

#include <iostream>
using namespace std;

// A structure to represent a queue
class Queue {
public:
    int front, rear, size;
    unsigned capacity;
    int* array;
};

// function to create a queue
// of given capacity.
// It initializes size of queue as 0
Queue* createQueue(unsigned capacity)
{
    Queue* queue = new Queue();
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    // This is important, see the enqueue
    queue->rear = capacity - 1;
    queue->array = new int[queue->capacity];
    return queue;
}

// Queue is full when size
// becomes equal to the capacity
int isFull(Queue* queue)
{
    return (queue->size == queue->capacity);
}

// Queue is empty when size is 0
int isEmpty(Queue* queue)
{
    return (queue->size == 0);
}

// Function to add an item to the queue.
// It changes rear and size
void enqueue(Queue* queue, int item)
{
    if (isFull(queue))
        return;
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size = queue->size + 1;
    cout << item << " enqueued to queue\n";
}

// Function to remove an item from queue.
// It changes front and size
int dequeue(Queue* queue)
{
    if (isEmpty(queue))
        return 0;
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size = queue->size - 1;
    return item;
}

void printall(Queue* queue)
{
  int count = 0;
  if (isEmpty(queue)) {
    cout << "Queue is empty" << endl;
    return;
  }
  for (count = queue->front; count <= queue->rear; count++) {
    cout << queue->array[count] << endl;
  }
}
// Function to get front of queue
int front(Queue* queue)
{
    if (isEmpty(queue))
        return 0;
    return queue->array[queue->front];
}

int main()
{
  Queue* queue = createQueue(1000);
  int option, value, check;
  cout << "IMPLEMENTATION OF QUEUE USING ARRAY" <<endl;
  cout << "Options to be performed on queue" <<endl;
  cout << "1. Enqueue the element to the queue" <<endl;
  cout << "2. Dequeue the element from the queue" <<endl;
  cout << "3. Print all the element of queue" <<endl;
  cout << "4. Peek - get the front element of the queue without removing it" << endl;
   cout << "5. Check whether the queue is empty or not?" <<endl;
   cout << "6. Exit"<<endl;
   while (1) {
      cout << "Enter option: " <<endl;
      cin >> option;
      switch (option) {
         case 1: {
            cout <<"Enter value to be added in queue:"<<endl;
            cin >>value;
            enqueue(queue, value);
            break;
         }
         case 2: {
            cout << dequeue(queue)<< " dequeued from queue\n";
            break;
         }
         case 3: {
            printall(queue);
            break;
         }
         case 4: {
            cout << "Front item is " << front(queue) << endl;
            break;
         }
         case 5: {
             check = isEmpty(queue);
             if (check) {
                 cout << " Queue is empty" <<endl;
             } else {
                 cout << " Queue is not empty" <<endl;
             }
             break;
         }
         case 6: {
            cout<<"Exit"<<endl;
            exit(0);
            break;
         }
         default: {
            cout<<"Invalid Choice"<<endl;
         }
      }
   }
    return 0;
}

OUTPUT:

 make -s
 ./main
IMPLEMENTATION OF QUEUE USING ARRAY
Options to be performed on queue
1. Enqueue the element to the queue
2. Dequeue the element from the queue
3. Print all the element of queue
4. Peek - get the front element of the queue without removing it
5. Check whether the queue is empty or not?
6. Exit
Enter option:
1
Enter value to be added in queue:
23
23 enqueued to queue
Enter option:
1
Enter value to be added in queue:
34
34 enqueued to queue
Enter option:
1
Enter value to be added in queue:
45
45 enqueued to queue
Enter option:
3
23
34
45
Enter option:
1
Enter value to be added in queue:
55
55 enqueued to queue
Enter option:
1
Enter value to be added in queue:
67
67 enqueued to queue
Enter option:
3
23
34
45
55
67
Enter option:
4
Front item is 23
Enter option:
2
23 dequeued from queue
Enter option:
3
34
45
55
67
Enter option: